// This file continues on from the scenario in example4-enc-part1

// In this file, you will try to get Tamarin to show that the scheme is correct, meaning that if the adversary asks for a message to be encrypted using a key, and then asks for that ciphertext to be decrypted using the same, it computes the original message

theory basic_stream_cipher_correctness
begin

builtins: xor

functions: f/2

// Make a rule that models honest parties generating secret keys with a corresponding key identifier, similar to the previous PRF example
// You can use the same rule as from part 1
// rule GenKey:
//   let
//     DECLARATION = DECLARATION
//   in
//     []
//   --[]->
//     []

// Make a rule that models the adversary requesting a message to be encrypted using the key corresponding to a given key identifier
// You should take as input from the adversary a message and a key identifier, pick a fresh nonce, compute the ciphertext, and output the ciphertext and nonce to the adversary
// You will also want to record in an action fact what happened in this query
// rule Enc:
//   let
//     DECLARATION = DECLARATION
//   in
//     []
//   --[]->
//     []

// Make a rule that models the adversary requesting a ciphertext (includig nonce) to be decrypted using the key corresponding to a given key identifier
// You should take as input from the adversary a ciphertext and nonce and a key identifier, then output the decryption to the adversary
// You will also want to record in an action fact what happened in this query
// rule Dec:
//   let
//     DECLARATION = DECLARATION
//   in
//     []
//   --[]->
//     []

// Using the things you recorded in your action facts, make a lemma that says: for all honestly generated keys, if a nonce was used to encrypt m to obtain ciphertext c, and c was decrypted using the same key and nonce, then it yields the same message
// lemma correctness:
//   "
//     TODO
//   "

end